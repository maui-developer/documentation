"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1278],{39997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ProcessMaker-3.8/BasicFeatures/7Dynaforms/DynaformDoAndDont","title":"Dynaform Do\'s and Dont\'s","description":"Dynaform Do\'s and Dont\'s","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/ProcessMaker-3.8/BasicFeatures/7Dynaforms/DynaformDoAndDont.md","sourceDirName":"ProcessMaker-3.8/BasicFeatures/7Dynaforms","slug":"/ProcessMaker-3.8/BasicFeatures/7Dynaforms/DynaformDoAndDont","permalink":"/es/docs/ProcessMaker-3.8/BasicFeatures/7Dynaforms/DynaformDoAndDont","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ProcessMaker-3.8/BasicFeatures/7Dynaforms/DynaformDoAndDont.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Dynaform Do\'s and Dont\'s","description":"Dynaform Do\'s and Dont\'s"},"sidebar":"tutorialSidebar","previous":{"title":"Adding Masks to Dynaform Fields","permalink":"/es/docs/ProcessMaker-3.8/BasicFeatures/7Dynaforms/AddingMasksDynaformFields"},"next":{"title":"8. Input Documents","permalink":"/es/docs/ProcessMaker-3.8/BasicFeatures/8InputDocuments"}}');var i=s(74848),r=s(28453);const o={sidebar_position:10,title:"Dynaform Do's and Dont's",description:"Dynaform Do's and Dont's"},a="Dynaform Do's and Dont's",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Architectural Design",id:"architectural-design",level:2},{value:"Backbone in Processmaker",id:"backbone-in-processmaker",level:3},{value:"Helpers",id:"helpers",level:2},{value:"Keep Model and View Data in Sync",id:"keep-model-and-view-data-in-sync",level:3},{value:"Provide Functionalities",id:"provide-functionalities",level:3},{value:"Common Mistakes",id:"common-mistakes",level:2},{value:"Set Field Value Using JQuery .val() or Native JavaScript",id:"set-field-value-using-jquery-val-or-native-javascript",level:3},{value:"AJAX Requests to Files in the Server",id:"ajax-requests-to-files-in-the-server",level:3},{value:"Going Through the DOM to Reach an Element",id:"going-through-the-dom-to-reach-an-element",level:3},{value:"Dependent Fields Overuse",id:"dependent-fields-overuse",level:3},{value:"Using CSS Properties that Break Bootstrap (Width Property)",id:"using-css-properties-that-break-bootstrap-width-property",level:3},{value:"URL Redirectioning",id:"url-redirectioning",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dynaform-dos-and-donts",children:"Dynaform Do's and Dont's"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"PMDynaform is the component responsible for rendering Dynaforms in ProcessMaker. It is the component in charge of creating controls, building the responsive layout and connecting services to gather and handle form data."}),"\n",(0,i.jsx)(n.h2,{id:"architectural-design",children:"Architectural Design"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The PMDynaform component is built over the following libraries:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:s(97849).A+"",width:"614",height:"226"})}),"\n",(0,i.jsx)(n.p,{children:"Four main libraries:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JQuery, used mainly to consume services and for DOM manipulation. It is a requirement for Bootstrap, JavaScript and plugins, and it is also used in Backbone views for DOM manipulation."}),"\n",(0,i.jsx)(n.li,{children:"Underscore.js, used to manage HTML templates, also used in Backbone views to render form controls."}),"\n",(0,i.jsx)(n.li,{children:"Boostrap, CSS for responsive building, responsive layout and js for showing panels and messages."}),"\n",(0,i.jsx)(n.li,{children:"Backbone.js, to manage data form and control building."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Three other libraries and plugins are used for specific sections of the code and are mainly invoked in Backbone models and views."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Moment.js, to format date fields in View Mode."}),"\n",(0,i.jsx)(n.li,{children:"Bootstrap DatePicker, to render date fields."}),"\n",(0,i.jsx)(n.li,{children:"DataTables, for Mobile Grids."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backbone-in-processmaker",children:"Backbone in Processmaker"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Backbone separates the business logic from the user interface. Each ProcessMaker control has its own Backbone model and view to handle its own business logic and user interface respectively."}),"\n",(0,i.jsx)(n.p,{children:"Models are in charge of the data orchestration and business logic, and the event emission when data changes. Views render UI, handle user interactivity and send captured input data to the model."}),"\n",(0,i.jsx)(n.h2,{id:"helpers",children:"Helpers"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"ProcessMaker Helpers were created as an API for architects with the following purposes:"}),"\n",(0,i.jsx)(n.h3,{id:"keep-model-and-view-data-in-sync",children:"Keep Model and View Data in Sync"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:'Each model and view hold user data, and this data needs to be syncronized between both to make sense. For example, a Textbox that reads "John" in the UI must read "John" in the model data as well.'}),"\n",(0,i.jsx)(n.p,{children:"As explained before, the view must send the captured input to the model. Note that the view sends this data whenever the user selects an option in a checkbox or picks a value from a dropdown."}),"\n",(0,i.jsx)(n.p,{children:"To ensure the synchronization between the data in views and models while using JavaScript, it is strongly recommended that architects write their code using ProcessMaker helpers. For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"control.setValue"}),"\n",(0,i.jsx)(n.li,{children:"control.setText"}),"\n",(0,i.jsx)(n.li,{children:"control.setLabel"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"provide-functionalities",children:"Provide Functionalities"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The following functionalities were created to access views:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"control.getValue"}),"\n",(0,i.jsx)(n.li,{children:"control.getText"}),"\n",(0,i.jsx)(n.li,{children:"control.getLabel"}),"\n",(0,i.jsx)(n.li,{children:"control.getControl"}),"\n",(0,i.jsx)(n.li,{children:"grid.getValue"}),"\n",(0,i.jsx)(n.li,{children:"PMDynaform.getAccessToken"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To attach events and accomplish operations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"control.SetOnchange"}),"\n",(0,i.jsx)(n.li,{children:"form.setOnSubmit"}),"\n",(0,i.jsx)(n.li,{children:"grid.onShowRowDialog"}),"\n",(0,i.jsx)(n.li,{children:"form.saveForm"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-mistakes",children:"Common Mistakes"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The following list details common problems that architects may encounter using JavaScript in Dynaforms:"}),"\n",(0,i.jsx)(n.h3,{id:"set-field-value-using-jquery-val-or-native-javascript",children:"Set Field Value Using JQuery .val() or Native JavaScript"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned above, a control view must send changes to its model when the user types something or make use of helpers to set values. This cannot be guaranteed when the data view is modified in other ways like: document.",(0,i.jsx)(n.code,{children:'getElementByID("form[field]").value'})," or ",(0,i.jsx)(n.code,{children:'$("form\\\\[field\\\\]").val()'}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ajax-requests-to-files-in-the-server",children:"AJAX Requests to Files in the Server"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Architects often need to make AJAX requests to obtain additional information from servers while the user is filling out a form. In ProcessMaker 2.x, architects used to code their backend inside plugins and point at the file URL to make AJAX requests. This practice works perfectly fine in a web browser but does NOT work on ProcessMaker Mobile because the form is running on a mobile device, and having a relative URL will cause the AJAX request to try to find the file in the device's local folders."}),"\n",(0,i.jsx)(n.p,{children:"Instead of creating relative URLs or pointing to unsecure pages, it is strongly recommended to use REST requests. Everything necessary to create REST requests is described in the ProcessMaker Environment Helpers section, which includes how to get the Token, Workspace Name and Server Name to build the URL and consume ProcessMaker endpoints easily."}),"\n",(0,i.jsx)(n.h3,{id:"going-through-the-dom-to-reach-an-element",children:"Going Through the DOM to Reach an Element"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Architects cannot rely on the idea that the generated HTML is always going to be the same. ProcessMaker HTML code might change to save issues or add features; therefore it is not recommended to reach elements by referencing the child, parent or sibling nodes."}),"\n",(0,i.jsx)(n.p,{children:"Use the control.getControl() or grid.getControl() helpers to reach the input tag of a control and control.getLabel() to get the field label."}),"\n",(0,i.jsx)(n.h3,{id:"dependent-fields-overuse",children:"Dependent Fields Overuse"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"By using dependent fields, users can populate text fields with the first value returned by a query. This practice is very useful when completing form information. For example, a disabled text field is populated depending on the user email selected from a dropdown. In the same design, the architect can add more fields to be populated in this way, like telephone, username, address, country, ZIP code, position, etc."}),"\n",(0,i.jsx)(n.p,{children:"The problem with this practice is that each dependent field request is processed individually, even though all the information is read from the same row in a table. In other words, each dependent field will trigger an AJAX request, making the form slower. In this case, it is recommended to create a custom endpoint inside a plugin that will return all the information in JSON format and use JavaScript to populate the fields."}),"\n",(0,i.jsx)(n.h3,{id:"using-css-properties-that-break-bootstrap-width-property",children:"Using CSS Properties that Break Bootstrap (Width Property)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The Bootstrap layout is defined in the HTML class attribute of a container, and divides the container width into 12 columns. If the width container is modified, the responsive behaviour that Bootstrap grants will be compromised."}),"\n",(0,i.jsx)(n.p,{children:"If for any reason a container width needs to be modified, it is recommended to modify the class attribute of the container following Bootstrap rules."}),"\n",(0,i.jsx)(n.h3,{id:"url-redirectioning",children:"URL Redirectioning"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"ProcessMaker Mobile does NOT support URL Redirectioning because the Dynaform runs inside a webkit hosted in the application. Therefore, relative paths will fail and absolute paths to ProcessMaker will generate unexpected behaviours."}),"\n",(0,i.jsx)(n.p,{children:"Commonly, architects redirect users to the ProcessMaker inbox. The alternative to this practice in ProcessMaker Mobile is to close the Web View with the following helper: form.closeForm()"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},97849:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/3.0PMDynaFormDoDontsArch-b533bda4a147d912d730abaccf8f6513.png"},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);