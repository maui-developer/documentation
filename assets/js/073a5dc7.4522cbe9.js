"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[409],{6829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ProcessMaker-3.8/BasicFeatures/5UsingConditions","title":"5. Using Conditions","description":"Camabiar","source":"@site/docs/ProcessMaker-3.8/BasicFeatures/5UsingConditions.md","sourceDirName":"ProcessMaker-3.8/BasicFeatures","slug":"/ProcessMaker-3.8/BasicFeatures/5UsingConditions","permalink":"/docs/ProcessMaker-3.8/BasicFeatures/5UsingConditions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ProcessMaker-3.8/BasicFeatures/5UsingConditions.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"5. Using Conditions","description":"Camabiar"},"sidebar":"tutorialSidebar","previous":{"title":"4. Roles","permalink":"/docs/ProcessMaker-3.8/BasicFeatures/4Roles"},"next":{"title":"6. Definition of a process","permalink":"/docs/category/6-definition-of-a-process"}}');var s=t(4848),r=t(8453);const a={sidebar_position:0,title:"5. Using Conditions",description:"Camabiar"},l="ProcessMaker 3.8 - Using Conditions",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Understanding Conditions",id:"understanding-conditions",level:2},{value:"Variables in Conditions",id:"variables-in-conditions",level:3},{value:"Comparison Operators in Conditions",id:"comparison-operators-in-conditions",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"processmaker-38---using-conditions",children:"ProcessMaker 3.8 - Using Conditions"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"ProcessMaker uses conditions in a number of different situations to determine whether execution happens or not. Conditions evaluate to either true or false, based upon the Boolean logic found in PHP. Conditions can be defined for steps (Dynaforms, Input Documents, Output Documents, and triggers), Evaluation and parallel gateways, and events."}),"\n",(0,s.jsx)(n.p,{children:"Additionally, conditions can be created to show or hide elements in a Dynaform using JavaScript's Boolean logic."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-conditions",children:"Understanding Conditions"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Conditions in ProcessMaker are based upon Boolean logic, which is the idea that any expression can be evaluated to either a value of True or False. If the expression is True, then execution will occur. If it is False, no execution will occur. In ProcessMaker, a condition can take many forms. These are all valid types of conditions:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Condition"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"3124.5"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"A floating point number that evaluates to true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:'"hello world"'}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"A string that evaluates to true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"false"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"The boolean value of false"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"@@ContactType"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"A case variable"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"@%Total == 400"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Equality comparison with an integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:'"check" === @@PaymentType'}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Equality comparison between strings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:'@@USR_USERNAME != "admin"'}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Non-equality comparison between strings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"@#InvoiceAmount > 100.00"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Greater than comparison with a floating point number"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"max(@#Invoice, @#TotalBill) < 1000"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Less than comparison with the return value of a function"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"(@#Price - @#Discount) * @%Quantity <= 3000"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Less than comparison with a mathematical operation using () to prioritize elements"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:'(@#Amount >= 5000.00 and @@priority == "high")'}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Two comparisons joined by AND"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:'((@@contact == "sales" or @@contact == "lead") and !(@@priority == "high"))'}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Logical OR, AND, NOT using () to prioritize elements"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"variables-in-conditions",children:"Variables in Conditions"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Conditions can contain system or case variables, which are preceded by an @ sign, and then another symbol that indicates how the variable is parsed:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Variable Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"@@variable_name"}),(0,s.jsx)(n.td,{children:'The variable will be parsed as astring. If originally another type, it will be converted to a string. So -1, 0 and 12.45 become "-1", "0" and "12.45", respectively.'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"@%variable_name"}),(0,s.jsx)(n.td,{children:'The variable will be parsed as an integer (a whole number). If originally another type, it will be converted to an integer. A real number will be converted to a whole number, so 12.45 becomes 12. A string that contains numbers will be converted to a whole number, so "655" and "34.19" become 655 and 34, respectively.'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"@#variable_name"}),(0,s.jsx)(n.td,{children:"The variable will be parsed as float type (a real number with decimals)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"@=variable_name"}),(0,s.jsx)(n.td,{children:"The variable will not be changed and is parsed as its original type."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Case variables are variables that hold information about a case and are created either when a field in a Dynaform is submitted or when defined in a trigger. Variable names must start with either a letter or underscore and are case sensitive, so @@_myvar, @@myvar, @@MyVar, @@MYVAR, and @@myvar2 are five different variables. Make sure to spell case variables exactly like their field names in Dynaforms or how they were defined in a trigger."}),"\n",(0,s.jsxs)(n.p,{children:["Conditions can NOT contain local or global PHP variables that were defined in triggers, but they can use PHP's superglobal variables, such as ",(0,s.jsx)(n.code,{children:"$_SERVER['SERVER_ADDR'] and $_ENV['PATH']"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"If a condition only contains a variable (and nothing else), then the value of the variable will be examined and evaluated to true or false. In PHP, a value is only considered false when it is one of the following values:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"The boolean value of false"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"An integer zero"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0.0"}),(0,s.jsx)(n.td,{children:"A float zero"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:'""'}),(0,s.jsx)(n.td,{children:"An empty string"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:'"0"'}),(0,s.jsx)(n.td,{children:"A string with a value of zero"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"array()"}),(0,s.jsx)(n.td,{children:"An array with zero elements"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"new StdClass()"}),(0,s.jsx)(n.td,{children:"An object with zero member variables"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NULL"}),(0,s.jsx)(n.td,{children:'A special value meaning "no value"'})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"All other values in PHP are considered true. For example, all of these values are considered true:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"The boolean value of true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"97"}),(0,s.jsx)(n.td,{children:"A positive integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"-4"}),(0,s.jsx)(n.td,{children:"A negative integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"100.99"}),(0,s.jsx)(n.td,{children:"A positive float"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"-4.23"}),(0,s.jsx)(n.td,{children:"A negative float"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:'"a nice string"'}),(0,s.jsx)(n.td,{children:"A non-empty string"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:'array("jack", "jill", "hill")'}),(0,s.jsx)(n.td,{children:"A non-empty array"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"comparison-operators-in-conditions",children:"Comparison Operators in Conditions"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"If a condition contains a comparison operator, such as equals, greater than or less than, then the values to the right and left of the operator will be compared and evaluated to true or false. The following comparison operators are available in PHP:"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);