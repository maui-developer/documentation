"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[409],{6829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"ProcessMaker-3.8/BasicFeatures/5UsingConditions","title":"5. Using Conditions","description":"Camabiar","source":"@site/docs/ProcessMaker-3.8/BasicFeatures/5UsingConditions.md","sourceDirName":"ProcessMaker-3.8/BasicFeatures","slug":"/ProcessMaker-3.8/BasicFeatures/5UsingConditions","permalink":"/docs/ProcessMaker-3.8/BasicFeatures/5UsingConditions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ProcessMaker-3.8/BasicFeatures/5UsingConditions.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"5. Using Conditions","description":"Camabiar"},"sidebar":"tutorialSidebar","previous":{"title":"4. Roles","permalink":"/docs/ProcessMaker-3.8/BasicFeatures/4Roles"},"next":{"title":"6. Definition of a process","permalink":"/docs/category/6-definition-of-a-process"}}');var r=n(4848),i=n(8453);const l={sidebar_position:0,title:"5. Using Conditions",description:"Camabiar"},o="ProcessMaker 3.8 - Using Conditions",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Understanding Conditions",id:"understanding-conditions",level:2},{value:"Variables in Conditions",id:"variables-in-conditions",level:3},{value:"Comparison Operators in Conditions",id:"comparison-operators-in-conditions",level:3},{value:"Type Conversion",id:"type-conversion",level:3},{value:"Math in Conditions",id:"math-in-conditions",level:3},{value:"Logical Operators in Conditions",id:"logical-operators-in-conditions",level:3}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"processmaker-38---using-conditions",children:"ProcessMaker 3.8 - Using Conditions"})}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"ProcessMaker uses conditions in a number of different situations to determine whether execution happens or not. Conditions evaluate to either true or false, based upon the Boolean logic found in PHP. Conditions can be defined for steps (Dynaforms, Input Documents, Output Documents, and triggers), Evaluation and parallel gateways, and events."}),"\n",(0,r.jsx)(t.p,{children:"Additionally, conditions can be created to show or hide elements in a Dynaform using JavaScript's Boolean logic."}),"\n",(0,r.jsx)(t.h2,{id:"understanding-conditions",children:"Understanding Conditions"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"Conditions in ProcessMaker are based upon Boolean logic, which is the idea that any expression can be evaluated to either a value of True or False. If the expression is True, then execution will occur. If it is False, no execution will occur. In ProcessMaker, a condition can take many forms. These are all valid types of conditions:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Condition"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"3124.5"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"A floating point number that evaluates to true"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"hello world"'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"A string that evaluates to true"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"false"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"The boolean value of false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"@@ContactType"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"A case variable"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"@%Total == 400"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Equality comparison with an integer"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"check" === @@PaymentType'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Equality comparison between strings"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'@@USR_USERNAME != "admin"'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Non-equality comparison between strings"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"@#InvoiceAmount > 100.00"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Greater than comparison with a floating point number"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"max(@#Invoice, @#TotalBill) < 1000"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Less than comparison with the return value of a function"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"(@#Price - @#Discount) * @%Quantity <= 3000"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Less than comparison with a mathematical operation using () to prioritize elements"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'(@#Amount >= 5000.00 and @@priority == "high")'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Two comparisons joined by AND"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'((@@contact == "sales" or @@contact == "lead") and !(@@priority == "high"))'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Logical OR, AND, NOT using () to prioritize elements"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"variables-in-conditions",children:"Variables in Conditions"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"Conditions can contain system or case variables, which are preceded by an @ sign, and then another symbol that indicates how the variable is parsed:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Variable Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"@@variable_name"}),(0,r.jsx)(t.td,{children:'The variable will be parsed as astring. If originally another type, it will be converted to a string. So -1, 0 and 12.45 become "-1", "0" and "12.45", respectively.'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"@%variable_name"}),(0,r.jsx)(t.td,{children:'The variable will be parsed as an integer (a whole number). If originally another type, it will be converted to an integer. A real number will be converted to a whole number, so 12.45 becomes 12. A string that contains numbers will be converted to a whole number, so "655" and "34.19" become 655 and 34, respectively.'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"@#variable_name"}),(0,r.jsx)(t.td,{children:"The variable will be parsed as float type (a real number with decimals)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"@=variable_name"}),(0,r.jsx)(t.td,{children:"The variable will not be changed and is parsed as its original type."})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Case variables are variables that hold information about a case and are created either when a field in a Dynaform is submitted or when defined in a trigger. Variable names must start with either a letter or underscore and are case sensitive, so @@_myvar, @@myvar, @@MyVar, @@MYVAR, and @@myvar2 are five different variables. Make sure to spell case variables exactly like their field names in Dynaforms or how they were defined in a trigger."}),"\n",(0,r.jsxs)(t.p,{children:["Conditions can NOT contain local or global PHP variables that were defined in triggers, but they can use PHP's superglobal variables, such as ",(0,r.jsx)(t.code,{children:"$_SERVER['SERVER_ADDR'] and $_ENV['PATH']"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"If a condition only contains a variable (and nothing else), then the value of the variable will be examined and evaluated to true or false. In PHP, a value is only considered false when it is one of the following values:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Value"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"FALSE"}),(0,r.jsx)(t.td,{children:"The boolean value of false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"0"}),(0,r.jsx)(t.td,{children:"An integer zero"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"0.0"}),(0,r.jsx)(t.td,{children:"A float zero"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'""'}),(0,r.jsx)(t.td,{children:"An empty string"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'"0"'}),(0,r.jsx)(t.td,{children:"A string with a value of zero"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"array()"}),(0,r.jsx)(t.td,{children:"An array with zero elements"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"new StdClass()"}),(0,r.jsx)(t.td,{children:"An object with zero member variables"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"NULL"}),(0,r.jsx)(t.td,{children:'A special value meaning "no value"'})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"All other values in PHP are considered true. For example, all of these values are considered true:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Value"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"TRUE"}),(0,r.jsx)(t.td,{children:"The boolean value of true"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"97"}),(0,r.jsx)(t.td,{children:"A positive integer"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-4"}),(0,r.jsx)(t.td,{children:"A negative integer"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"100.99"}),(0,r.jsx)(t.td,{children:"A positive float"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-4.23"}),(0,r.jsx)(t.td,{children:"A negative float"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'"a nice string"'}),(0,r.jsx)(t.td,{children:"A non-empty string"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'array("jack", "jill", "hill")'}),(0,r.jsx)(t.td,{children:"A non-empty array"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"comparison-operators-in-conditions",children:"Comparison Operators in Conditions"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"If a condition contains a comparison operator, such as equals, greater than or less than, then the values to the right and left of the operator will be compared and evaluated to true or false. The following comparison operators are available in PHP:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Operator"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Example"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"=="}),(0,r.jsx)(t.td,{children:"Equals"}),(0,r.jsx)(t.td,{children:'@@CurrencyType == "dollars"'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"==="}),(0,r.jsx)(t.td,{children:"Equals to same variable type"}),(0,r.jsx)(t.td,{children:"@%Total === 100"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"<>"}),(0,r.jsx)(t.td,{children:"Not equal"}),(0,r.jsx)(t.td,{children:'@@CurrencyType <> "euros"'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"!="}),(0,r.jsx)(t.td,{children:"Not equal"}),(0,r.jsx)(t.td,{children:"@%Total != 0"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"!=="}),(0,r.jsx)(t.td,{children:"Not equal to same variable type"}),(0,r.jsx)(t.td,{children:"@=RunTest !== false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"<"}),(0,r.jsx)(t.td,{children:"Less than"}),(0,r.jsx)(t.td,{children:"@%Total < 1000"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"<="}),(0,r.jsx)(t.td,{children:"Less than or equal to"}),(0,r.jsx)(t.td,{children:"@#SubTotal <= @#Total"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:">"}),(0,r.jsx)(t.td,{children:"Greater than"}),(0,r.jsx)(t.td,{children:"@#Balance > 0"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:">="}),(0,r.jsx)(t.td,{children:"Greater than or equal to"}),(0,r.jsx)(t.td,{children:"pow(@#Total, 3) >= @#Limit"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"type-conversion",children:"Type Conversion"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"It is generally a good idea to use the correct type of variable when doing comparisons, so if comparing to a string, use @@variable_name. If comparing to an integer, use @%variable_name. If comparing to a floating point number, use @#variable_name. If comparing to a boolean value, an array or an object, use @=variable_name. Nonetheless, if the types don't match, PHP will try to convert both values to the same type before doing the comparison. Due to type conversion, the following conditions are all considered true:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"True Condition"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'"42" == 42'}),(0,r.jsx)(t.td,{children:'The string "42" is converted into the integer 42, then compared.'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'" 42 " == 42'}),(0,r.jsx)(t.td,{children:'The string " 42 " is converted into the integer 42 (spaces are ignored), then compared.'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'"42 frogs" == 42'}),(0,r.jsx)(t.td,{children:'The string "42 frogs" is converted into the integer 42, then compared. Only strings starting with numbers can be converted into integers or floats.'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"42 == 42.0"}),(0,r.jsx)(t.td,{children:"The integer 42 is converted into the float 42.0, then compared."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"0 == false"}),(0,r.jsx)(t.td,{children:"The integer 0 is converted into the boolean FALSE, then compared."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"42 == true"}),(0,r.jsx)(t.td,{children:"The integer 42 is converted into the boolean TRUE, then compared."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'"" == false'}),(0,r.jsx)(t.td,{children:'The empty string "" is converted into the boolean FALSE, then compared'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:'"hello" == true'}),(0,r.jsx)(t.td,{children:'The string "hello" is converted into the boolean TRUE, then compared.'})]})]})]}),"\n",(0,r.jsx)(t.p,{children:'To prevent the comparison from converting value types, use the === and !== operators, which will only evaluate to true when comparing the same types of values, so "42" == 42 is true, but "42" === \\42 is false.'}),"\n",(0,r.jsx)(t.p,{children:"While automatic type conversion can be useful, remember that conversion will not round numbers, nor will it truncate strings. Here are a number of solutions to common problems in conditions:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"False Condition"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Problem"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Solution"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Examples"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"42 == 42.1"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"The integer 42 is converted to the float 42.0, which doesn't equal 42.1, so the condition evaluates to false."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Use the (int) type cast or the @% variable parsing to convert a float into an integer."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"42 == (int) 42.1 42 == @%Total"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"42 == (int) 41.999"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"When the float 41.999 is converted to an integer, all decimal numbers are simply dropped and there is no rounding up, so the comparison is 42 == 41."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Use PHP's round() function to round to the nearest integer. Also use the ceil() and floor() functions to round a number up or down."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"42 == round(41.999) 42 == round(@#Total)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"5 / 2 == 2.5"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"This is false, because the integer 5 is divided by the integer 2. Since both are integers, the result is the integer 2 (the remainder is dropped). Then, the integer 2 is converted to the float 2.0 to compare with 2.5."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Use the type cast (float) or reference the variable as @# to convert one of the numbers to a float before dividing. This will cause a floating point division, so the remainder won't be lost."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"5 / (float) 2 == 2.5 5 / @#var == 2.5"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"42.12 == 42.123"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"For two floats to be equal, their decimal numbers must also be equal."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Specify the number of decimal points to round to before comparing."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"42.12 == round(42.123, 2) 42.12 == round(@#Total, 2)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"hel" == "hello"'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"The condition is false, because strings have to have the same number of characters to be equal."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Use PHP's substr() function to cut the string to a set number of characters before comparing. To compare a variable number of characters use the strlen() function. To look for a string inside another string, use the strstr() function."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"hel" == substr("hello", 0, 3) "hel" == substr(@@s, 0, 3) @@s1 == substr(@@s2, 0, strlen(@@s1)) strstr(@@s, "hel")'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"hello" == " hello "'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"The condition is false, because PHP doesn't eliminate spaces when comparing strings."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Use PHP's trim() function to eliminate any whitespace (including tabs and returns) from the beginning or end of a string. Also use ltrim() or rtrim() to only eliminate from the beginning or end of a string."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"hello" == trim(" hello ") "hello" == trim(@@Greet)'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'"HeLlO" == "hello"'}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"The condition is false, because the comparison of strings is case sensitive."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Use strtoupper() or strtolower() to convert the strings to the same case, or use strcasecmp() or strncasecmp() to do case insensitive comparisons."}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:'strtolower("HeLlo") == "hello" strtoupper(@@s1) == strtoupper(@@s2) !strcasecmp(@@s1, @@s2)'})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"math-in-conditions",children:"Math in Conditions"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"Conditions can use PHP's mathematical operators, such as - (negation), + (addition), - (subtraction), * (multiplication), / (division), % (modulus, i.e., division remainder). When using mathematical operators, keep in mind the rules of operator precedence and remember to use parentheses to evaluate certain elements before other elements in the expression."}),"\n",(0,r.jsx)(t.p,{children:"To do more advanced mathematical operations, use PHP's math functions, such as pow(), max(), min(), sin(), cos(), log(), abs(), etc."}),"\n",(0,r.jsx)(t.h3,{id:"logical-operators-in-conditions",children:"Logical Operators in Conditions"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"Conditions can also use logical operators to join together multiple expressions and construct complex conditions."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Operator"}),(0,r.jsx)(t.th,{children:"Example"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"and"}),(0,r.jsx)(t.td,{children:"(@@a and @@b)"}),(0,r.jsx)(t.td,{children:"True if both @@a and @@b are true."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"&&"}),(0,r.jsx)(t.td,{children:"(@@a && @@b)"}),(0,r.jsx)(t.td,{children:"True if both @@a and @@b are true. && is like the and operator, but it has a higher operator precedence."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"or"}),(0,r.jsx)(t.td,{children:"(@@a or @@b)"}),(0,r.jsx)(t.td,{children:"True if either @@a or @@b is true."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"||"}),(0,r.jsx)(t.td,{children:"(@@a || @@b)"}),(0,r.jsx)(t.td,{children:"True if either @@a or @@b is true. || is like the or operator, but has a higher operator precedence."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"xor"}),(0,r.jsx)(t.td,{children:"(@@a xor @@b)"}),(0,r.jsx)(t.td,{children:"True if either @@a or @@b is true, but not both."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"!"}),(0,r.jsx)(t.td,{children:"!@@a"}),(0,r.jsx)(t.td,{children:"Reverses the outcome, so true becomes false and false becomes true."})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Like true and false, the spelling of the and, or, xor operators is case insensitive, so and can also be spelled as And, AnD, AND, etc."}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:'Warning: If using the logical operators AND, OR, XOR, &&, || in a condition, it is recommended to enclose the statement inside parentheses () to ensure that the entire statement is evaluated and not just the first part of the statement. It is also recommended to use && and || instead of AND, OR, XOR. In recent versions of ProcessMaker, the following condition:\n@@myvar != "X" AND @@myvar != "Y"\nis evaluated as:\n@@myvar != "X"\nTo ensure that the entire statement is evaluated, enclose it in parentheses:\n(@@myvar != "X" AND @@myvar != "Y")'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);